"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3454],{2777:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var r=s(4848),t=s(8453);const i={title:"Transfer an Employee",description:'Documentation and assets for successful "Transfer an Employee" deployment',custom_edit_url:null},o="Transfer an Employee Usecase",a={id:"Use Cases/TransferWorker",title:"Transfer an Employee",description:'Documentation and assets for successful "Transfer an Employee" deployment',source:"@site/docs/02-Use Cases/02-TransferWorker.mdx",sourceDirName:"02-Use Cases",slug:"/Use Cases/TransferWorker",permalink:"/solution-askhr/Use Cases/TransferWorker",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Transfer an Employee",description:'Documentation and assets for successful "Transfer an Employee" deployment',custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"Employment Verification Letter",permalink:"/solution-askhr/Use Cases/EVLetter"}},c={},l=[{value:"Summary",id:"summary",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"IBM Technologies",id:"ibm-technologies",level:3},{value:"Supporting Technologies",id:"supporting-technologies",level:3},{value:"Quickstart",id:"quickstart",level:2},{value:"Assets",id:"assets",level:2},{value:"References",id:"references",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"transfer-an-employee-usecase",children:"Transfer an Employee Usecase"})}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.p,{children:"The HR use case for transferring an employee involves moving an employee from one position, department, or location to another within the organization. This process includes updating job titles, responsibilities, and reporting structures, as well as managing any necessary adjustments to compensation, benefits, and training."}),"\n",(0,r.jsx)(n.p,{children:"Value Statement: Automating employee transfers enhances efficiency by streamlining the updating of job roles, compensation, and reporting structures. This ensures a smooth transition with minimal manual intervention, reducing errors and improving employee experience and operational continuity."}),"\n",(0,r.jsx)(n.p,{children:"IBM has successfuly implemented this usecase in IBM AskHR. The current customer POC's are in progress."}),"\n",(0,r.jsx)(n.admonition,{type:"danger",children:(0,r.jsx)(n.p,{children:"This documentation is currently under construction. Refer to the flight log documentation to stay up to date on the development efforts or check back soon"})}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.h3,{id:"ibm-technologies",children:"IBM Technologies"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"IBM watsonx Orchestrate"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"supporting-technologies",children:"Supporting Technologies"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:'Oracle HCM with access to "workers" API and ability to perform a PATCH function'}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"quickstart",children:"Quickstart"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Upload the Oracle HCM API Spec under assets"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create a skill flow leveraging the API Spec as such:"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.mermaid,{value:'flowchart LR\n    subgraph "watsonx Orchestrate Skill Flow"\n    A(Get Worker)--\x3e B(Get Worker Assignments)--\x3eC(Patch Worker Assignment)\n    end'}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:["Set the input parameters for each:","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Use the ",(0,r.jsx)(n.code,{children:"workerId"}),' output from "Get Worker" for input on "Get Worker Assignment"']}),"\n",(0,r.jsxs)(n.li,{children:["Use the ",(0,r.jsx)(n.code,{children:"workerId"}),' output from "Get Worker Assignments" for input on "Patch Worker Assignment"']}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Confirm with the customer if there are multiple assignments per worker. This documentation assumes 1 assignment per worker and will use/change the first assignment entry from ",(0,r.jsx)(n.code,{children:"Get Worker Assignment"})]})}),"\n",(0,r.jsx)(n.h2,{id:"assets",children:"Assets"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Supporting Oracle HCM API (Skills)"}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The below YAML is used to integrate with the IBM-owned Oracle HCM instance for use with pre-sales POC's"}),"\n",(0,r.jsxs)(n.li,{children:["Source the ",(0,r.jsx)(n.code,{children:"server"}),' URL from IBM Internal documentation - denoted by "#######"']}),"\n"]})}),"\n",(0,r.jsx)(n.admonition,{type:"danger",children:(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:'Path "publicWorker" API must be replaced with "worker" API. Currently, worker API is not exposed by IBM-owned Oracle HCM instance. The fix is in progress'}),"\n",(0,r.jsx)(n.li,{children:"API spec is not currently formatted to pass the watsonx Orchestrate validation requirements"}),"\n"]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"openapi: 3.0.3\ninfo:\n  title: HCM Rest API\n  description: API to access employee resources in the HCM system.\n  version: 1.0.0\nservers:\n  - url: ######\n    description: HCM API server\n\npaths:\n  /hcmRestApi/resources/11.13.18.05/publicWorkers:\n    get:\n      summary: Get Employee Resources\n      description: Retrieve a list of employee resources.\n      operationId: getEmployeeResources\n      parameters:\n      - name: q\n        in: query\n        description: >\n          This query parameter defines the where clause. The resource collection will be queried using the provided expressions. \n          The value of this query parameter is one or more expressions. \n          Example: `?q=Deptno>=10 and <= 30;Loc!=NY`\n          \n          Format: `?q=expression1;expression2`\n          \n          You can use these queryable attributes to filter this collection resource using the `q` query parameter:\n          \n          - `DisplayName`: string; Person's display name.\n          - `FirstName`: string; Person's first name.\n          - `LastName`; string; Person's last name.\n          - `FullName`: string; Person's full name.\n          - `KnownAs`: string; Person's preferred name.\n          - `WorkEmail`: string; Person's work e-mail address.\n        example: FirstName=Joe;DisplayName=Joe Root;WorkEmail=joe.root@trt.com\n        required: false\n        schema:\n          type: string\n      responses:\n        '200':\n          description: Successful response with a list of employee resources.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    PersonId:\n                      type: integer\n                      description: Employee ID\n                    WorkEmail:\n                      type: string\n                      description: Employee name\n                    DisplayName:\n                      type: string\n                      description: Employee name\n        '400':\n          description: Bad Request.\n        '401':\n          description: Unauthorized - invalid credentials.\n        '500':\n          description: Internal Server Error - unexpected error.\n      security:\n        - basicAuth: []\n\n  /hcmRestApi/resources/11.13.18.05/publicWorkers/{workerId}/child/assignments:\n    get:\n      summary: Get Employee Assignments\n      description: Retrieve a list of assignments for an employee.\n      operationId: getEmployeeAssignments\n      parameters:\n        - name: workerId\n          in: path\n          required: true\n          description: The ID of the worker for whom to retrieve assignments.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response with a list of employee assignments.\n          content:\n            application/json:\n              schema:\n                 $ref: '#/components/schemas/GetEmployeeAssignmentsResponse'\n        '400':\n          description: Bad Request.\n        '401':\n          description: Unauthorized - invalid credentials.\n        '500':\n          description: Internal Server Error - unexpected error.\n      security:\n        - basicAuth: []\n  /hcmRestApi/resources/11.13.18.05/publicWorkers/{workerId}/child/assignments/{assignmentId}:\n    patch:\n      summary: Update an Employee Assignment\n      description: Update an assignment of an employee.\n      operationId: updateEmployeeAssignment\n      parameters:\n        - name: workerId\n          in: path\n          required: true\n          description: The ID of the worker for whom to update assignments.\n          schema:\n            type: string\n        - name: assignmentId\n          in: path\n          required: true\n          description: The ID of the assignment to update.\n          schema:\n            type: string\n        - name: effective-Of\n          in: header\n          required: true\n          description: >\n            This header specifies the effective date range for the update operation. \n            Example: `RangeMode=UPDATE;RangeStartDate=2019-09-11;RangeEndDate=4712-12-31`\n          schema:\n            type: string\n            example: RangeMode=UPDATE;RangeStartDate=2019-09-11;RangeEndDate=4712-12-31\n      requestBody:\n        description: The assignment details to be updated.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ActionCode:\n                  type: string\n                  description: The action code related to the assignment update.\n                  default: \"TRANSFER\"\n                ReasonCode:\n                  type: string\n                  description: The reason code for the assignment update.\n                LocationId:\n                  type: string\n                  description: The ID of the location associated with the assignment.\n            example:\n              ActionCode: \"TRANSFER\"\n              ReasonCode: \"LOCCHANGE\"\n              LocationId: \"300100073991592\"\n      responses:\n        '200':\n          description: Successfully updated\n          content:\n            application/json: {}\n        '400':\n          description: Bad Request.\n        '401':\n          description: Unauthorized - invalid credentials.\n        '403':\n          description: Forbidden.\n        '500':\n          description: Internal Server Error - unexpected error.\n      security:\n        - basicAuth: []\ncomponents:\n  schemas:\n    GetEmployeeAssignmentsResponse:\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            type: object\n            properties:\n              AssignmentId:\n                type: integer\n                description: The unique identifier for the assignment\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n"})}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);